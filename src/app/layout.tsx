import type { Metadata } from "next";
import "./globals.css";
import { ConfigProvider, Layout, Button } from "antd";
import ptBR from "antd/locale/pt_BR";
import { Rubik } from "next/font/google";
import { useMemo } from "react";

import resolveConfig from "tailwindcss/resolveConfig";
import tailwindConfig from "../../tailwind.config";

const rubik = Rubik({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "GestEdu",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const config = useMemo(() => resolveConfig(tailwindConfig), []);

  return (
    <html lang="en">
      <body className={`${rubik.className} antialiased`}>
        <ConfigProvider
          locale={ptBR}
          theme={{
            token: {
              colorPrimary: config.theme.colors.primary,
              colorBgBase: config.theme.colors.darkBg,
              colorBgContainer: config.theme.colors.darkModal,
              colorBgLayout: config.theme.colors.darkBg,
              colorTextBase: config.theme.colors.darkTexto,
            },
            components: {
              Layout: {
                headerBg: config.theme.colors.darkModal,
              },
              Tag: {
                colorSuccess: config.theme.colors.sistemaGreen,
                colorSuccessBg: config.theme.colors.transparent,
                colorSuccessBorder: config.theme.colors.transparent,
                colorWarning: config.theme.colors.sistemaYellow,
                colorWarningBg: config.theme.colors.transparent,
                colorWarningBorder: config.theme.colors.transparent,
              },
              Menu: {
                itemBg: config.theme.colors.darkBg,
                darkItemSelectedBg: config.theme.colors.darkModal,
                darkItemBg: config.theme.colors.darkModal,
                darkSubMenuItemBg: config.theme.colors.darkModal,
                darkItemHoverBg: config.theme.colors.darkSelecao,
                darkItemSelectedColor: config.theme.colors.primary,
                darkPopupBg: config.theme.colors.darkModal,
              },
              Table: {
                colorBgContainer: config.theme.colors.darkModal,
                colorBgLayout: config.theme.colors.darkModal,
                colorBorder: config.theme.colors.darkModal,
                colorBorderSecondary: config.theme.colors.darkModal,
              },
              Button: {
                colorPrimary: config.theme.colors.btnPrimary,
                primaryColor: config.theme.colors.darkTexto,
                colorPrimaryBorder: config.theme.colors.btnHoverPrimary,
                colorPrimaryHover: config.theme.colors.btnHoverPrimary,
                colorPrimaryActive: config.theme.colors.btnActivePrimary,
                colorError: config.theme.colors.sistemaRed,
              },
              Input: {
                colorBgContainer: config.theme.colors.darkBg,
                colorBgLayout: config.theme.colors.darkBg,
                colorBorder: config.theme.colors.darkModal,
                colorBorderSecondary: config.theme.colors.darkModal,
                hoverBorderColor: config.theme.colors.darkModal,
                activeBorderColor: config.theme.colors.darkBg,
              },
<<<<<<< HEAD
=======
              Select: {
                colorBgContainer: config.theme.colors.darkBg,
                colorBgLayout: config.theme.colors.darkBg,
                colorBorder: config.theme.colors.darkModal,
                colorBorderSecondary: config.theme.colors.darkModal,
                hoverBorderColor: config.theme.colors.darkModal,
                activeBorderColor: config.theme.colors.darkBg,
              },
              DatePicker: {
                colorBgContainer: config.theme.colors.darkBg,
                colorBgLayout: config.theme.colors.darkBg,
                colorBorder: config.theme.colors.darkModal,
                colorBorderSecondary: config.theme.colors.darkModal,
                hoverBorderColor: config.theme.colors.darkModal,
                activeBorderColor: config.theme.colors.darkBg,
              },

>>>>>>> 5685bb1d957d935b023f8b03ccc3eb0a255d2936
              Notification: {
                colorSuccess: config.theme.colors.sistemaGreen,
                colorWarning: config.theme.colors.sistemaYellow,
                colorError: config.theme.colors.sistemaRed,
                colorInfo: config.theme.colors.sistematBlue,
                colorBgContainer: config.theme.colors.darkModal,
              },
            },
          }}
        >
          <Layout>{children}</Layout>
        </ConfigProvider>
      </body>
    </html>
  );
}
